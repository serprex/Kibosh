#!/usr/bin/python
from __future__ import division
import pyglet
from pyglet.gl import *
from socket import *
from math import sin,cos,pi
from select import select
from itertools import count
from marshal import dumps,loads
from random import getrandbits
try:
	range=xrange
	from itertools import imap as map,izip as zip,ifilter as filter
	getnext=lambda x:x.next
except:
	cmp=lambda x,y:(x>y)or-(x<y)
	getnext=lambda x:x.__next__
globals().update((lambda a,b:(a,(int(b) if b.isdigit() else b)))(*a.split()) for a in open("Kibosh."))
tcp=socket(AF_INET,SOCK_STREAM)
if len(__import__("sys").argv)==2:
	tcp.bind(("",port))
	tcp.listen(1)
	tcp=tcp.accept()[0]
	if blue==2:blue=getrandbits(1)
	tcp.send(chr(blue))
else:
	tcp.connect((host,port))
	blue=tcp.recv(1)=="\0"
tcp.setsockopt(IPPROTO_TCP,TCP_NODELAY,1)
recv=tcp.recv
send=tcp.send
pyglet.clock.set_fps_limit(30)
W=pyglet.window.Window(width=320,height=600)
print blue
W.set_location(100+600*blue,100)
glEnable(GL_BLEND)
glBlendFunc(GL_SRC_ALPHA,GL_ONE)
class Node:
	def __init__(s,*x):
		s.x,s.y=x
		s.awds=[0,0,0,0]
	def move(s):
		if hit:return
		if s.awds[2]-s.awds[0] and s.awds[1]-s.awds[3]:
			s.x+=(s.awds[2]-s.awds[0]<<2)*3>>2
			s.y+=(s.awds[1]-s.awds[3]<<2)*3>>2
		else:
			s.x+=s.awds[2]-s.awds[0]<<2
			s.y+=s.awds[1]-s.awds[3]<<2
		if s.x<0:s.x=0
		elif s.x>320:s.x=320
		if s.y<0:s.y=0
		elif s.y>511:s.y=511
	def draw(s):
		glBegin(GL_TRIANGLE_FAN)
		glColor3f(0.,0.,0.)
		glVertex2i(s.x,s.y)
		glColor3f(not s.b,0.,s.b)
		for a in range(7):
			glVertex2f(s.x+cos(a*pi/3+T)*24.,s.y+sin(a*pi/3+T)*24.)
		glEnd()
	def hit(s):
		s.x-=cmp(s.x,160)<<4
		s.y-=cmp(s.y,256)<<4
		if -24<s.x-160<24:s.x=160
		if -24<s.y-256<24:s.y=256
class Cannon:
	die=lambda s:1
	def __init__(s,p,x,y,d,v,t,D=None):
		s.p=p
		s.x=x
		s.y=y
		s.v=sin(d)*v
		s.h=cos(d)*v
		s.t=t
		s.d=d if D is None else D
	def __call__(s):
		s.x+=s.h
		s.y+=s.v
		if not (-32<s.x<352 and -32<s.y<544):return s.die()
		if not T%s.t:Bul(s.p,s.x,s.y,s.d,s.v*2)
		glColor3f(s.p,1,not s.p)
		glRectf(s.x-16,s.y-16,s.x+16,s.y+16)
N1,N2=(Node(80,160),Node(240,320))[::1-(blue<<1)]
N1.b=blue
N2.b=not blue
X0=Y0=Z0=.5
pause=hit=T=0
life=3
B=[]
F=set()
def flost(x):return dumps(x)[1:] if type(x) is float else loads("g"+x)
def Bul(p,x,y,d,v):
	global B
	B+=[p,x,y,sin(d)*v,cos(d)*v],
def miss():
	global hit,life
	if not life:"dead"
	hit=1
	life-=1
def on_key(k,o):
	global pause
	if 65360<k<65365:
		N1.awds[k-65361]=o
		send("%c%c%c"%(0xF0|N1.awds[0]|N1.awds[1]<<1|N1.awds[2]<<2|N1.awds[3]<<3,N1.x>>1,N1.y>>1))
	elif k==112:
		pause=not pause
		send("\xE0"+("%c%c%c%c%c"%(T&255,T>>8&255,T>>16&255,len(B)&255,len(B)>>8)+"".join("%c%c%c%s%s"%((b[2]&256>>6)|(b[1]&256>>7)|p,b[1]&255,b[2]&255,flost(b[3]),flost(b[4])) for b in B) if pause else ""))
	elif k==65307:W.has_exit=1
W.on_key_press=lambda k,m:on_key(k,1)
W.on_key_release=lambda k,m:on_key(k,0)
F.add(Cannon(1,100,400,pi*3/2,3,48))
while not W.has_exit:
	W.dispatch_events()
	if pause:
		while select((tcp,),(),(),0)[0]:
			r=ord(recv(1))
			if r&0xF0==0xF0:
				N2.awds=r&1,r>>1&1,r>>2&1,r>>3&1
				N2.x=ord(recv(1))<<1
				N2.y=ord(recv(1))<<1
			elif r==0xE0:pause=0
			elif r==0xEF:exit()
			else:raise Exception("%x %s"%(r,recv(1024)))
	else:
		N1.move()
		while select((tcp,),(),(),0)[0]:
			r=ord(recv(1))
			if r&0xF0==0xF0:
				N2.awds=r&1,r>>1&1,r>>2&1,r>>3&1
				N2.x=ord(recv(1))<<1
				N2.y=ord(recv(1))<<1
			elif r==0xE0:
				pause=1
				T=ord(recv(1))|ord(recv(1))<<8|ord(recv(1))<<16
				B=[[b&1,ord(recv(1))|(b&2)>>1,ord(recv(1))|(b&4)>>2,flost(recv(8)),flost(recv(8))] for b in (ord(recv(1)) for b in range(ord(recv(1))|ord(recv(1))<<8))]
				break
			elif r==0xEE:miss()
			elif r==0xEF:exit()
			else:raise Exception("%x %s"%(r,recv(1024)))
		N2.move()
		Z0+=(N1.y-N2.y)/((N1.x-N2.x)**2+(N1.y-N2.y)**2+1)**.5
		if Z0<0.:Z0=0.
		elif Z0>1.:Z0=1.
		X0=N1.x+(N2.x-N1.x)*Z0
		Y0=N1.y+(N2.y-N1.y)*Z0
		if hit:
			N1.hit()
			N2.hit()
			hit=not(256==N1.y==N2.y and 160==N1.x==N2.x)
			B=[]
		glBegin(GL_QUADS)
		for a,b in zip(count(1),reversed(B)):
			glColor3f(not b[0],b[0]==2,b[0]==1)
			glVertex2f(b[1]+3.,b[2])
			glVertex2f(b[1],b[2]+3.)
			glVertex2f(b[1]-3.,b[2])
			glVertex2f(b[1],b[2]-3.)
			b[1]+=b[3]
			b[2]+=b[4]
			glVertex2f(b[1]+6.,b[2])
			glVertex2f(b[1],b[2]+6.)
			glVertex2f(b[1]-6.,b[2])
			glVertex2f(b[1],b[2]-6.)
			if -9.<b[1]-X0<9. or -9.<b[2]-Y0<9.:
				if Z0 and b[0]!=blue:
					send("\xEE")
					miss()
				del B[-a]
			elif not (-32.<b[1]<352. and -32.<b[2]<544.):del B[-a]
		glEnd()
		F.difference_update(set(a for a in F if a()))
		N1.draw()
		glBegin(GL_LINES)
		glColor3f(not blue,0.,blue)
		glVertex2i(N1.x,N1.y)
		glColor3f(blue,0.,not blue)
		glVertex2i(N2.x,N2.y)
		glEnd()
		N2.draw()
		glColor3f(1.,1.,1.)
		glBegin(GL_TRIANGLE_FAN)
		glVertex2f(X0,Y0)
		glColor4f(0.,0.,0.,0.)
		for a in range(7):
			glVertex2f(X0+cos(a*pi/3-T)*24.,Y0+sin(a*pi/3+T)*24.)
		glEnd()
	W.flip()
	glClear(GL_COLOR_BUFFER_BIT)
	T+=1
	pyglet.clock.tick()
send("\xEF")
