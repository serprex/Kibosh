#!/usr/bin/python
from __future__ import division
import pyglet
from pyglet.gl import *
from socket import *
from math import *
from select import select
from random import random
try:
	range=xrange
	from itertools import imap as map,izip as zip,ifilter as filter
except:pass
globals().update((lambda a,b:(a,(int(b) if b.isdigit() else b)))(*a.split()) for a in open("Kibosh."))
socket.check=lambda s,x=0:select((s,),(),(),x)[0]
tcp=socket(AF_INET,SOCK_STREAM)
if len(__import__("sys").argv)==2:
	tcp.bind(("",port))
	tcp.listen(1)
	tcp=tcp.accept()[0]
	tcp.send(chr(blue))
else:
	tcp.connect((host,port))
	blue=not ord(tcp.recv(1))
tcp.setsockopt(IPPROTO_TCP,TCP_NODELAY,1)
pyglet.clock.set_fps_limit(30)
W=pyglet.window.Window(width=320,height=512)
W.set_location(100+600*blue,100)
awds=[0,0,0,0]
awds2=[0,0,0,0]
if blue:
	X1,Y1=80,160
	X2,Y2=240,320
else:
	X1,Y1=240,320
	X2,Y2=80,160
T=0
@W.event
def on_key_press(k,m):
	if 65360<k<65365:awds[k-65361]=1
	elif k=="Z":"shoot"
@W.event
def on_key_release(k,m):
	if 65360<k<65365:awds[k-65361]=0
while not W.has_exit:
	pyglet.clock.tick()
	W.dispatch_events()
	T+=1
	if not T&31:
		tcp.send("%c%c%c"%(X1>>8|Y1>>8<<1,X1&255,Y1&255))
	elif not T&3:
		tcp.send(chr(128|awds[0]|awds[1]<<1|awds[2]<<2|awds[3]<<3))
	X1+=awds[2]-awds[0]<<2
	if X1<0:X1=0
	if X1>320:X1=320
	Y1+=awds[1]-awds[3]<<2
	if Y1<0:Y1=0
	if Y1>511:Y1=511
	X2+=awds2[2]-awds2[0]<<2
	if X2<0:X2=0
	if X2>320:X2=320
	Y2+=awds2[1]-awds2[3]<<2
	if Y2<0:Y2=0
	if Y2>511:Y2=511
	if tcp.check():
		r=ord(tcp.recv(1))
		if not r&0xF0:
			X2=ord(tcp.recv(1))|(r&1)<<8
			Y2=ord(tcp.recv(1))|(r&2)<<7
		elif r&0xF0==0x80:
			awds2=[r&1,r>>1&1,r>>2&1,r>>3&1]
		elif r==127:exit(tcp.close())
	glColor3f(not blue,0,blue)
	glBegin(GL_TRIANGLE_FAN)
	glVertex2i(X1,Y1)
	for a in range(7):
		glVertex2f(X1+cos(a*pi/3+T)*24,Y1+sin(a*pi/3+T)*24)
	glEnd()
	glColor3f(blue,0,not blue)
	glBegin(GL_TRIANGLE_FAN)
	glVertex2i(X2,Y2)
	for a in range(7):
		glVertex2f(X2+cos(a*pi/3-T)*24,Y2+sin(a*pi/3-T)*24)
	glEnd()
	W.flip()
	glClear(GL_COLOR_BUFFER_BIT)
tcp.send("\x7F")
tcp.recv(1)
tcp.close()
