#!/usr/bin/python
from __future__ import division
import pyglet
pyglet.options["debug_gl"]=False
from pyglet.gl import *
from socket import *
from math import *
from select import select
from itertools import count,chain,cycle
from random import getrandbits
from time import time,sleep
from sys import argv
from collections import defaultdict
try:
	range=xrange
	from itertools import imap as map,izip as zip,ifilter as filter
	getnext=lambda x:x.next
except:
	cmp=lambda x,y:(x>y)or-(x<y)
	getnext=lambda x:x.__next__
for a in range(1,16):globals().update(("pi%X%X"%(a,b),pi*a/b) for b in range(1,16))
pi63v=0,pi13,pi23,pi33,pi43,pi53,pi63
def pi1v(x,v=[a%pi21 for a in range(1420)]):return v[x%1420]
def sin1(x,v=list(map(sin,range(1420)))):return v[x%1420]
def cos1(x,v=list(map(cos,range(1420)))):return v[x%1420]
pyglet.clock.set_fps_limit(30)
GLF3=GLfloat*3
GLF4=GLfloat*4
Red,Blu,Gre,Wht,Blk=RGB=GLF3(1.,0.,0.),GLF3(0.,0.,1.),GLF3(0.,1.,0.),GLF3(1.,1.,1.),GLF3(0.,0.,0.)
def ptdir(x,y,m):
	x%=pi21
	y%=pi21
	z=abs(x-y)
	return min(m,z) if (x+z)%pi21==y else -min(m,z)
def Bul(p,x,y,d,v):
	global B
	B+=[p,x,y,cos(d)*v,sin(d)*v],
def Nut(s):
	global N
	if s is N1:
		N+=[pi12,[(s.x,s.y)],1],
		send("\xE1")
def miss():
	global hit,life,E
	if not hit:
		if not life:print "dead"
		E=0
		hit=1
		life-=1
def atch():
	global E
	send(chr(0xE2|(E==39)))
	E+=1
	if E==40:
		Nut(N1)
		E=0
def near(x,y):return min(chain((((a.x-x)**2+(a.y-y)**2,a,a is N1) for a in NN),((((a[1][-1][0]-x)**2+(a[1][-1][1]-y)**2,a,a[2]) for a in N if a[0] is not None))))
def msg(x,y=""):
	M[x]=y
	send("%c%c%s"%(0xC0|len(y),x,y))
def on_key(k,o):
	global pause
	if 65360<k<65365:
		N1.awds[k-65361]=o
		send("%c%c%c"%(0xF0|N1.awds[0]|N1.awds[1]<<1|N1.awds[2]<<2|N1.awds[3]<<3,N1.x>>1,N1.y>>1))
	elif k==65307:W.has_exit=1
X0=Y0=Z0=.5
T=E=pause=hit=0
life=3
B=[]
N=[]
M={}
class F:
	def __init__(s):
		s.F={}
		s._F={}
		s.R=[]
		s.__iter__=s.F.__iter__
		s.__getitem__=s.F.__getitem__
		s.__contains__=s.F.__contains__
		s.f=getnext(count())
	def __call__(s,x):
		s._F[s.f()&4095]=x
		return x
	def __delitem__(s,x):
		s.R+=x,
	def flush(s):
		for a in s.R:
			if a in s.F:del s.F[a]
		s.F.update(s._F)
		s._F.clear()
F=F()
Fd=set()
W=pyglet.window.Window(320,512,visible=False)
W.on_key_press=lambda k,m:on_key(k,1)
W.on_key_release=lambda k,m:on_key(k,0)
glEnable(GL_BLEND)
tcp=socket(AF_INET,SOCK_STREAM)
tcp.setsockopt(SOL_SOCKET,SO_REUSEADDR,1)
tcp.setsockopt(IPPROTO_TCP,TCP_NODELAY,1)
blue=getrandbits(1)
hopo="",2000
L="Kikiki"
H=1
for a in chain(open("K.txt").readlines(),argv[1:]):
	if not a or a[0]=="#":continue
	elif ":" in a:hopo=(a[:a.find(":")] or hopo[0] if a.find("::")==-1 else ""),int(a[a.rfind(":")+1:] or hopo[1])
	elif "." in a:hopo=a,hopo[1]
	elif a.isdigit():hopo=hopo[0],int(a)
	elif a[0] in "br":blue=a[0]=="b"
	elif a[0]=="H":H=min(max(int(a[1:]),1),4)
	elif a[0]=="L":L=a[1:]
if hopo[0]:
	tcp.connect(hopo)
	L=ord(tcp.recv(1))
	blue=not L&1
	H=(L>>1)+1
	L=tcp.recv(ord(tcp.recv(1))|(L&0xF8)<<5)
	tcp.send(" ")
	tcp.recv(1)
else:
	tcp.bind(hopo)
	tcp.listen(1)
	tcp=tcp.accept()[0]
	tcp.setsockopt(IPPROTO_TCP,TCP_NODELAY,1)
	tcp.send("%c%c%s"%(blue|H-1<<1|(len(L)&0x1F00)>>5,len(L)&255,L))
	sleep((time()-(tcp.send(tcp.recv(1)),time())[1])/-2)
recv=tcp.recv
send=tcp.send
class Node:
	def __init__(s,*x):
		s.x,s.y,s.p=x
		s.awds=[0,0,0,0]
	def move(s):
		if not hit:
			if s.awds[2]-s.awds[0] and s.awds[1]-s.awds[3]:
				s.x+=(s.awds[2]-s.awds[0]<<2)*3>>2
				s.y+=(s.awds[1]-s.awds[3]<<2)*3>>2
			else:
				s.x+=s.awds[2]-s.awds[0]<<2
				s.y+=s.awds[1]-s.awds[3]<<2
			if s.x<0:s.x=0
			elif s.x>320:s.x=320
			if s.y<0:s.y=0
			elif s.y>511:s.y=511
class Cannond:
	def __init__(s,z):
		s.x=z.x
		s.y=z.y
		s.d=z.d
		s.p=RGB[z.p]
		s.r=16
	def __call__(s):
		s.r-=1
		if not s.r:return 1
		ct=cos1(T)
		st=sin1(T)
		glColor3fv(s.p)
		for a in GL_QUADS,GL_LINE_LOOP:
			glBegin(a)
			glVertex2f(s.x+s.r*ct,s.y+s.r*st)
			glVertex2f(s.x-s.r*st,s.y+s.r*ct)
			glVertex2f(s.x-s.r*ct,s.y-s.r*st)
			glVertex2f(s.x+s.r*st,s.y-s.r*ct)
			glEnd()
			glColor3fv(Wht)
		glColor3fv(s.p)
		for a in GL_TRIANGLES,GL_LINE_LOOP:
			glBegin(a)
			glVertex2f(s.x,s.y)
			glVertex2f(s.x+s.r*1.5*cos(s.d-pi16),s.y+s.r*1.5*sin(s.d-pi16))
			glVertex2f(s.x+s.r*1.5*cos(s.d+pi16),s.y+s.r*1.5*sin(s.d+pi16))
			glEnd()
			glColor3fv(Wht)
class Cannon:
	die=lambda s:not Fd.add(Cannond(s))
	def __init__(s,p,x,y,d,v,t,D=None,V=3):
		s.p=p
		s.x=x
		s.y=y
		s.h=cos(d)*v
		s.v=sin(d)*v
		s.t=t
		s.d=d if D is None else D
		s.V=V
		s.T=0
	def __call__(s):
		s.T+=1
		s.x+=s.h
		s.y+=s.v
		s.d+=ptdir(s.d,atan2(Y0-s.y,X0-s.x),pi19)
		ct=cos1(s.T)*16.
		st=sin1(s.T)*16.
		if not(-32<s.x<352 and -32<s.y<544):return 1
		a=near(s.x,s.y)
		if a[0]<400 and a[2]:
			if s.p<2:Nut(a[1])
			return s.die()
		if not s.T%s.t:Bul(s.p,s.x+ct,s.y+st,s.d,s.V)
		glColor3fv(RGB[s.p])
		for a in GL_QUADS,GL_LINE_LOOP:
			glBegin(a)
			glVertex2f(s.x+ct,s.y+st)
			glVertex2f(s.x-st,s.y+ct)
			glVertex2f(s.x-ct,s.y-st)
			glVertex2f(s.x+st,s.y-ct)
			glEnd()
			glColor3fv(Wht)
		glColor3fv(RGB[s.p])
		for a in GL_TRIANGLES,GL_LINE_LOOP:
			glBegin(a)
			glVertex2f(s.x,s.y)
			glVertex2f(s.x+24.*cos(s.d-pi16),s.y+24.*sin(s.d-pi16))
			glVertex2f(s.x+24.*cos(s.d+pi16),s.y+24.*sin(s.d+pi16))
			glEnd()
			glColor3fv(Wht)
class CannonCannon:
	die=lambda s:1
	def __init__(s,x):
		s.x=x
		s.y=599
		s.h=s.p=0
		s.l=4
	def __call__(s):
		s.y-=s.y>400
		if "C" in M:
			del M["C"]
			s.h=60
			s.p=not s.p
			s.l-=1
		if s.l>0:
			if not s.h:
				a=near(s.x,s.y)
				if a[0]<999 and a[2] and a[1] is not N1:msg("C")
			else:
				s.h-=1
				for a in NN:a.y=abs(a.y-(s.h>>2))
			if not T&15:F(Cannon(s.p,s.x,s.y,pi32,8,6))
		else:
			s.l-=2
			for a in range(8):Bul(2,s.x,s.y,pi28*a+T,8)
			if s.l==-80:return 1
		ct=cos1(T)
		st=sin1(T)
		glColor4f(RGB[s.p][0],0.,RGB[s.p][2],s.y/100)
		for a in GL_QUADS,GL_LINE_LOOP:
			glBegin(a)
			glVertex2f(s.x+(80+s.l)*ct,s.y+(80+s.l)*st)
			glVertex2f(s.x-(80+s.l)*st,s.y+(80+s.l)*ct)
			glVertex2f(s.x-(80+s.l)*ct,s.y-(80+s.l)*st)
			glVertex2f(s.x+(80+s.l)*st,s.y-(80+s.l)*ct)
			glEnd()
			glColor3fv(Wht)
class Gattled:
	def __init__(s,z):
		s.p=z.p
		s.x=z.x
		s.y=z.y
		s.d=z.d
		s.r=24
	def __call__(s):
		s.r-=1
		if not s.r:return 1
		glColor3fv(RGB[s.p])
		for a in GL_TRIANGLES,GL_LINE_LOOP:
			glBegin(a)
			glVertex2f(s.x,s.y)
			glVertex2f(s.x+s.r*cos(s.d-pi16),s.y+s.r*sin(s.d-pi16))
			glVertex2f(s.x+s.r*cos(s.d+pi16),s.y+s.r*sin(s.d+pi16))
			glVertex2f(s.x,s.y)
			glVertex2f(s.x+s.r*cos(s.d+pi36),s.y+s.r*sin(s.d+pi36))
			glVertex2f(s.x+s.r*cos(s.d+pi56),s.y+s.r*sin(s.d+pi56))
			glVertex2f(s.x,s.y)
			glVertex2f(s.x+s.r*cos(s.d-pi56),s.y+s.r*sin(s.d-pi56))
			glVertex2f(s.x+s.r*cos(s.d-pi36),s.y+s.r*sin(s.d-pi36))
			glEnd()
			glColor3fv(Wht)
class Gattle:
	die=lambda s:not Fd.add(Gattled(s))
	def __init__(s,p,x,y,d,v,t,V=4):
		s.p=p
		s.x=x
		s.y=y
		s.h=cos(d)*v
		s.v=sin(d)*v
		s.t=t
		s.d=0
		s.V=V
		s.T=0
	def __call__(s):
		s.x+=s.h
		s.y+=s.v
		s.d+=pi19/s.t
		s.T+=1
		if not(-32<s.x<352 and -32<s.y<544):return 1
		a=near(s.x,s.y)
		if a[0]<400 and a[2]:
			if s.p<2:Nut(a[1])
			return s.die()
		if not s.T%s.t:
			Bul(s.p,s.x,s.y,s.d,s.V)
			Bul(s.p,s.x,s.y,s.d+pi23,s.V)
			Bul(s.p,s.x,s.y,s.d-pi23,s.V)
		glColor3fv(RGB[s.p])
		for a in GL_TRIANGLES,GL_LINE_LOOP:
			glBegin(a)
			glVertex2f(s.x,s.y)
			glVertex2f(s.x+24.*cos(s.d-pi16),s.y+24.*sin(s.d-pi16))
			glVertex2f(s.x+24.*cos(s.d+pi16),s.y+24.*sin(s.d+pi16))
			glVertex2f(s.x,s.y)
			glVertex2f(s.x+24.*cos(s.d+pi36),s.y+24.*sin(s.d+pi36))
			glVertex2f(s.x+24.*cos(s.d+pi56),s.y+24.*sin(s.d+pi56))
			glVertex2f(s.x,s.y)
			glVertex2f(s.x+24.*cos(s.d-pi56),s.y+24.*sin(s.d-pi56))
			glVertex2f(s.x+24.*cos(s.d-pi36),s.y+24.*sin(s.d-pi36))
			glEnd()
			glColor3fv(Wht)
class Complement:
	die=lambda s:1
	def __init__(s,x):
		s.p=2
		s.x=x
		s.y=-96
		s.d=pi12
		s.l=2
		s.h=s.s=0
		s.e=1.
	def __call__(s):
		if "O" in M:
			del M["O"]
			s.h=60
			s.l<<=1
			if s.l==16:s.s=3
		if s.s<2:
			s.y+=(16,-2)[s.s]
			s.s+=s.y==(640,444)[s.s]
		elif s.s==2:
			s.d+=pi/30
			a=near(s.x,s.y)
			if s.h:s.h-=1
			elif a[0]<999 and a[2] and a[1] is not N1:msg("O")
		else:
			s.e-=1.
			if s.e==60.:return 1
		glColor3fv(RGB[2])
		glBegin(GL_LINE_LOOP)
		for a in range(s.l):
			ca=cos(s.d+pi21*a/s.l)*s.e
			sa=sin(s.d+pi21*a/s.l)*s.e
			if T&3 and s.s<3:B.append([getattr(ND[1.-Z0],"p",2),s.x+ca*99.,s.y+sa*99.,ca*8.,sa*8.])
			for a in range(9,99,3):glVertex2f(s.x+ca*a+getrandbits(3)-4,s.y+sa*a+getrandbits(3)-4)
		glEnd()
class Laser(object):
	die=lambda s:not Fd.add(Laserd(s))
	def __init__(s,p,x,y,d):
		s.p=p
		s.x=x
		s.y=y
		s.t=d
		s.d=getnext(cycle(sin(pi19*a) for a in range(18)))
		s.l=0
	def __call__(s):
		v=((s.x-N1.x)**2+(s.y-N1.y)**2)**.5
		if not Z0 and v<s.l and sin(abs(atan2(s.y-N1.y,s.x-N1.x)-s.t)%pi21)*v<9:
			if s.p!=N1.p:
				send("\xEE")
				miss()
			else:atch()
		v=sin(s.t)
		h=cos(s.t)
		s.l+=20 if -40<s.x+s.l*h<340 and -40<s.y+s.l*v<552 else -20
		sd=s.d()
		glBegin(GL_TRIANGLES)
		for a in range(0,s.l,3):
			c=cos1(a)+sd
			ha=s.x+h*a-c*8
			va=s.y+v*a-c*8
			if a&3<2:glColor3fv(RGB[s.p] if not a&3 else Wht if s.p==1 else Blk)
			glVertex2f(ha+c*getrandbits(4),va+c*getrandbits(4))
			glVertex2f(ha+c*getrandbits(4),va+c*getrandbits(4))
			glVertex2f(ha+c*getrandbits(4),va+c*getrandbits(4))
		glEnd()
class Laserd(Laser):
	die=lambda s:not Fd.add(Laserd(s))
	def __init__(s,z):
		s.p=z.p
		s.x=z.x
		s.y=z.y
		s.t=z.t
		s.h=cos(z.t)
		s.v=sin(z.t)
		s.d=z.d
		s.l=z.l
	def __call__(s):
		s.l-=30
		return s.l<0 or super(Laserd,s).__call__()
class LaserCd:
	def __init__(s,z):
		s.x=z.l.x
		s.y=z.l.y
		s.p=RGB[z.l.p]
		s.r=16
		s.T=z.T
	def __call__(s):
		s.r-=1
		s.T+=1
		if not s.r:return 1
		ct=cos1(s.T)*16.
		st=sin1(s.T)*16.
		glColor3fv(s.p)
		for a in GL_QUADS,GL_LINE_LOOP:
			glBegin(a)
			glVertex2f(s.x+ct,s.y+st)
			glVertex2f(s.x-st,s.y+ct)
			glVertex2f(s.x-ct,s.y-st)
			glVertex2f(s.x+st,s.y-ct)
			glEnd()
			glColor3fv(Wht)
class LaserC:
	die=lambda s:(s.l.die(),Fd.add(LaserCd(s)))
	def __init__(s,p,x,y,d,v,D=None,a=0):
		s.l=Laser(p,x,y,d)
		s.x=x
		s.y=y
		s.h=cos(d if D is None else D)*v
		s.v=sin(d if D is None else D)*v
		s.a=a
		s.T=0
	def __call__(s):
		L=s.l
		L.x=s.x=s.x+s.h
		L.y=s.y=s.y+s.v
		s.T+=1
		if s.a:L.t+=ptdir(L.t,atan2(Y0-s.y,X0-s.x),pi/s.a)
		if not(-32<L.x<352 and -32<L.y<544):return L.die()
		a=near(L.x,L.y)
		if a[0]<400 and a[2] and a[1] is N1:
			if L<2:Nut(a[1])
			return s.die()
		ct=cos1(s.T)*16.
		st=sin1(s.T)*16.
		glColor3fv(RGB[L.p])
		for a in GL_QUADS,GL_LINE_LOOP:
			glBegin(a)
			glVertex2f(s.x+ct,s.y+st)
			glVertex2f(s.x-st,s.y+ct)
			glVertex2f(s.x-ct,s.y-st)
			glVertex2f(s.x+st,s.y-ct)
			glEnd()
			glColor3fv(Wht)
		return L()
NN=N1,N2=(Node(80,256,0),Node(240,256,1))[::1-(blue<<1)]
ND=defaultdict(lambda:None,{0.:N1,1.:N2})
L=__import__(L)
L.G.update(globals())
Time=L.Time
Back=L.Back
W.set_visible(True)
W.set_location(200+321*blue,50)
while not W.has_exit:
	W.dispatch_events()
	if T in Time:Time[T]()
	Back(T,1-Z0 if blue else Z0)
	N1.move()
	while select((tcp,),(),(),0)[0]:
		r=ord(recv(1))
		if r&0xF0==0xF0:
			N2.awds=r&1,r>>1&1,r>>2&1,r>>3&1
			N2.x=ord(recv(1))<<1
			N2.y=ord(recv(1))<<1
		elif r&0xF0==0xD0:
			r=(r&15)|ord(recv(1))<<4
			if r in F:
				F[r].die()
				del F[r]
		elif r&0xF0==0xC0:
			a=recv(1)
			M[a]="" if r==0xC0 else recv(r&15)
		elif r==0xE1:N+=[pi12,[(N2.x,N2.y)],False],
		elif r==0xE2:E+=1
		elif r==0xE3:E=0
		elif r==0xEE:miss()
		elif r==0xEF:raise SystemExit
		else:raise Exception("%X %s"%(r,recv(64)))
	N2.move()
	s=N1.y-N2.y
	if s:
		Z0+=s/((N1.x-N2.x)**2+s**2)**.5
		if Z0<0.:Z0=0.
		elif Z0>1.:Z0=1.
	X0=N1.x+(N2.x-N1.x)*Z0
	Y0=N1.y-s*Z0
	if hit:
		for s in NN:
			s.x=160 if -16<s.x-160<16 else s.x-cmp(s.x,160)*12
			s.y=256 if -16<s.y-256<16 else s.y-cmp(s.y,256)*12
		hit=not(256==N1.y==N2.y and 160==N1.x==N2.x)
		B=[]
	glBlendFunc(GL_SRC_ALPHA,GL_ONE)
	glBegin(GL_LINES)
	for s in NN:
		glColor3fv(RGB[s.p])
		glVertex2i(s.x,s.y)
	glEnd()
	for s in NN:
		glBegin(GL_TRIANGLE_FAN)
		glColor3fv(Blk)
		glVertex2i(s.x,s.y)
		glColor3fv(RGB[s.p])
		for a in pi63v:glVertex2f(s.x+cos(a+T)*24.,s.y+sin(a+T)*24.)
		glEnd()
	glColor3fv(Wht)
	glBegin(GL_TRIANGLE_FAN)
	glVertex2f(X0,Y0)
	glColor4f(0.,0.,0.,0.)
	for a in pi63v:glVertex2f(X0+cos(a)*12.,Y0+sin(a)*12.)
	glEnd()
	glBlendFunc(GL_ONE,GL_ZERO)
	glBegin(GL_QUADS)
	r=[]
	s=ND[Z0]
	for a,b in enumerate(B):
		glColor3fv(RGB[b[0]])
		glVertex2f(b[1]+3.,b[2])
		glVertex2f(b[1],b[2]+3.)
		glVertex2f(b[1]-3.,b[2])
		glVertex2f(b[1],b[2]-3.)
		b[1]+=b[3]
		b[2]+=b[4]
		glVertex2f(b[1]+7.,b[2])
		glVertex2f(b[1],b[2]+7.)
		glVertex2f(b[1]-7.,b[2])
		glVertex2f(b[1],b[2]-7.)
		glColor3fv(Wht if b[0]==1 else Blk)
		glVertex2f(b[1]+4.,b[2])
		glVertex2f(b[1],b[2]+4.)
		glVertex2f(b[1]-4.,b[2])
		glVertex2f(b[1],b[2]-4.)
		if not(-8.<b[1]<328. and -8.<b[2]<520.):r+=a,
		elif s and b[0]==s.p and (b[1]-s.x)**2+(b[2]-s.y)**2<400:
			r+=a,
			if s==N1:atch()
		elif (b[1]-X0)**2+(b[2]-Y0)**2<49. and Z0<.5 and (Z0 or b[0]!=blue):
			send("\xEE")
			miss()
			break
	glEnd()
	for r in reversed(r):del B[r]
	F.flush()
	for r in F:
		if F[r]():
			send("%c%c"%(0xD0|(r&15),r>>4))
			del F[r]
	Fd.difference_update([r for r in Fd if r()])
	glBlendFunc(GL_ONE_MINUS_DST_COLOR,GL_ZERO)
	glBegin(GL_TRIANGLES)
	glColor3fv(Wht)
	r=0
	for a in N:
		if a[0] is not None:
			if F:
				x=y=0
				for c in F:
					b=F[c].x-a[1][-1][0]
					c=F[c].y-a[1][-1][1]
					d=b**2+c**2+1
					x+=b/d
					y+=c/d
				a[0]+=ptdir(a[0],atan2(y,x),pi18)
			a[1]+=(a[1][-1][0]+cos(a[0])*12.,a[1][-1][1]+sin(a[0])*12.),
			if len(a[1])==45:a[0]=None
		else:
			del a[1][0]
			if not a[1]:r+=1
		d=len(a[1])
		for c,b in enumerate(a[1]):
			c/=d
			glVertex2f(b[0]+c*(getrandbits(5)-16),b[1]+c*(getrandbits(5)-16))
			glVertex2f(b[0]+c*(getrandbits(5)-16),b[1]+c*(getrandbits(5)-16))
			glVertex2f(b[0]+c*(getrandbits(5)-16),b[1]+c*(getrandbits(5)-16))
	del N[:r]
	glEnd()
	glRecti(0,512,E<<3,504)
	W.flip()
	glClear(GL_COLOR_BUFFER_BIT)
	T+=1
	pyglet.clock.tick()
send("\xEF")
